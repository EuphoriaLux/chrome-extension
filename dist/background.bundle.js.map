{"version":3,"file":"background.bundle.js","mappingssources":["webpack://power-up_extension/./src/background.js"],"sourcesContent":["console.log(\"Simplified background script loaded\");\r\n\r\nchrome.runtime.onInstalled.addListener(() => {\r\n  console.log(\"Service worker installed.\");\r\n});\r\n\r\nchrome.action.onClicked.addListener(async (tab) => {\r\n    console.log(\"Extension icon clicked. Tab URL:\", tab.url);\r\n    \r\n    if (!tab.url.includes(\"linkedin.com\")) {\r\n        console.error(\"Not a LinkedIn page\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        let currentTabId = tab.id;\r\n        let windowReady = false;\r\n        \r\n        // Listen for the window ready message\r\n        const windowReadyListener = (request, sender, sendResponse) => {\r\n            if (request.action === \"windowReady\") {\r\n                console.log(\"Background script - Window ready message received\");\r\n                windowReady = true;\r\n                chrome.runtime.onMessage.removeListener(windowReadyListener);\r\n                sendResponse({ received: true });\r\n            }\r\n        };\r\n        chrome.runtime.onMessage.addListener(windowReadyListener);\r\n\r\n        // Create the window first\r\n        const newWindow = await chrome.windows.create({\r\n            url: \"window.html\",\r\n            type: \"popup\",\r\n            width: 800,\r\n            height: 600\r\n        });\r\n\r\n        console.log(\"Injecting content script...\");\r\n        await chrome.scripting.executeScript({\r\n            target: { tabId: currentTabId },\r\n            files: ['contentScript.bundle.js']\r\n        });\r\n        console.log(\"Content script injected successfully\");\r\n\r\n        // Increase timeout for window ready\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n        try {\r\n            console.log(\"Sending message to content script to get posts...\");\r\n            const response = await new Promise((resolve, reject) => {\r\n                chrome.tabs.sendMessage(currentTabId, { action: \"getPostContent\" }, response => {\r\n                    if (chrome.runtime.lastError) {\r\n                        console.error(\"Content script message error:\", chrome.runtime.lastError);\r\n                        reject(new Error(chrome.runtime.lastError.message));\r\n                    } else {\r\n                        resolve(response);\r\n                    }\r\n                });\r\n            });\r\n\r\n            console.log(\"Received response from content script:\", response);\r\n            \r\n            // Get the tab in the new window\r\n            const windowTabs = await chrome.tabs.query({windowId: newWindow.id});\r\n\r\n            if (windowTabs && windowTabs[0]) {\r\n                const popupTabId = windowTabs[0].id;\r\n                \r\n                // Wait for the window to be ready before sending the message\r\n                const waitForWindowReady = () => new Promise(resolve => {\r\n                    const check = () => {\r\n                        if (windowReady) {\r\n                            resolve();\r\n                        } else {\r\n                            setTimeout(check, 100);\r\n                        }\r\n                    };\r\n                    check();\r\n                });\r\n                \r\n                await waitForWindowReady();\r\n\r\n                // Send posts to window and wait for acknowledgment\r\n                const postsDelivered = new Promise((resolve, reject) => {\r\n                    chrome.runtime.sendMessage({\r\n                        action: \"setPostContent\",\r\n                        postContent: response?.posts || [],\r\n                        debug: response?.debug || {}\r\n                    }, response => {\r\n                        if (chrome.runtime.lastError) {\r\n                            console.error(\"Error sending message to window:\", chrome.runtime.lastError);\r\n                            reject(chrome.runtime.lastError);\r\n                        } else {\r\n                            console.log(\"Background script - Posts sent to window\");\r\n                            resolve();\r\n                        }\r\n                    });\r\n                });\r\n\r\n                // Wait for posts received confirmation with error handling\r\n                const postsReceived = new Promise((resolve, reject) => {\r\n                    const listener = (request, sender, sendResponse) => {\r\n                        try {\r\n                            if (request.action === \"postsReceived\") {\r\n                                console.log(\"Background script - Posts received confirmation from window\");\r\n                                sendResponse({ success: true });\r\n                                chrome.runtime.onMessage.removeListener(listener);\r\n                                resolve();\r\n                            }\r\n                            return true; // Keep the message channel open\r\n                        } catch (error) {\r\n                            console.error(\"Background script - Error in postsReceived listener:\", error);\r\n                            reject(error);\r\n                        }\r\n                    };\r\n                    chrome.runtime.onMessage.addListener(listener);\r\n                });\r\n\r\n                // Wait for both promises with timeout\r\n                const timeout = new Promise((_, reject) => \r\n                    setTimeout(() => reject(new Error(\"Operation timed out\")), 5000)\r\n                );\r\n\r\n                await Promise.race([\r\n                    Promise.all([postsDelivered, postsReceived]),\r\n                    timeout\r\n                ]);\r\n                console.log(\"Background script - Posts successfully delivered and received\");\r\n\r\n                // Listen for generateComment messages from window\r\n                const generateCommentListener = (request, sender, sendResponse) => {\r\n                    if (request.action === \"generateComment\") {\r\n                        console.log(\"Background script - Received generateComment message from window:\", request);\r\n                        chrome.tabs.sendMessage(currentTabId, {\r\n                            action: \"generateComment\",\r\n                            postId: request.postId\r\n                        }, response => {\r\n                            if (chrome.runtime.lastError) {\r\n                                console.error(\"Background script - Error sending generateComment message to content script:\", {\r\n                                    error: chrome.runtime.lastError,\r\n                                    message: chrome.runtime.lastError.message,\r\n                                    stack: new Error().stack\r\n                                });\r\n                                sendResponse({ error: chrome.runtime.lastError.message });\r\n                            } else {\r\n                                console.log(\"Background script - Received generateComment response from content script:\", response);\r\n                                sendResponse(response);\r\n                            }\r\n                        });\r\n                        return true; // Keep the message channel open\r\n                    }\r\n                };\r\n                chrome.runtime.onMessage.addListener(generateCommentListener);\r\n\r\n            } else {\r\n                console.error(\"Could not find the tab in the new window\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error in message handling:\", error);\r\n            if (chrome.runtime.lastError) {\r\n                console.error(\"Runtime error details:\", chrome.runtime.lastError);\r\n            }\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in click handler:\", error);\r\n        if (chrome.runtime.lastError) {\r\n            console.error(\"Final error details:\", chrome.runtime.lastError);\r\n        }\r\n    }\r\n});\r\n"],"names":[],"sourceRoot":""}