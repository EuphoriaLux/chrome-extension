{"version":3,"file":"background.bundle.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://power-up_extension/./linkedin-enhancer/src/background.js"],"sourcesContent":["console.log(\"Simplified background script loaded\");\n\nchrome.runtime.onInstalled.addListener(() => {\n  console.log(\"Service worker installed.\");\n});\n\nchrome.action.onClicked.addListener(async (tab) => {\n    console.log(\"Extension icon clicked. Tab URL:\", tab.url);\n    \n    if (!tab.url.includes(\"linkedin.com\")) {\n        console.error(\"Not a LinkedIn page\");\n        return;\n    }\n\n    try {\n        const originalTabId = tab.id;\n\n        // Create the window first\n        const newWindow = await chrome.windows.create({\n            url: \"window.html\",\n            type: \"popup\",\n            width: 800,\n            height: 600\n        });\n\n        console.log(\"Injecting content script...\");\n        await chrome.scripting.executeScript({\n            target: { tabId: originalTabId },\n            files: ['content.js']\n        });\n        console.log(\"Content script injected successfully\");\n\n        // Increase timeout and add error handling\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        try {\n            console.log(\"Sending message to content script to get posts...\");\n            const response = await new Promise((resolve, reject) => {\n                chrome.tabs.sendMessage(originalTabId, {action: \"getPostContent\"}, response => {\n                    if (chrome.runtime.lastError) {\n                        reject(chrome.runtime.lastError);\n                    } else {\n                        resolve(response);\n                    }\n                });\n            });\n\n            console.log(\"Received response from content script:\", response);\n            \n            // Get the tab in the new window\n            const windowTabs = await chrome.tabs.query({windowId: newWindow.id});\n            if (windowTabs && windowTabs[0]) {\n                const popupTabId = windowTabs[0].id;\n                \n                // Send the posts to the popup window\n                await new Promise((resolve, reject) => {\n                    chrome.tabs.sendMessage(popupTabId, {\n                        action: \"setPostContent\",\n                        postContent: response?.posts || [],\n                        debug: response?.debug || {}\n                    }, response => {\n                        if (chrome.runtime.lastError) {\n                            reject(chrome.runtime.lastError);\n                        } else {\n                            resolve(response);\n                        }\n                    });\n                });\n            }\n        } catch (error) {\n            console.error(\"Error in message handling:\", error);\n        }\n\n    } catch (error) {\n        console.error(\"Error in click handler:\", error);\n    }\n});\n"],"names":[],"sourceRoot":""}