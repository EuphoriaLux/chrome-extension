{"version":3,"file":"options.bundle.js","mappingssources":["webpack://power-up_extension/./src/options/options.js"],"sourcesContent":["// Save options to chrome.storage\r\nfunction saveOptions() {\r\n    const apiKey = document.getElementById('apiKey').value.trim();\r\n    const defaultPrompt = document.getElementById('defaultPrompt').value.trim();\r\n    const temperature = parseFloat(document.getElementById('temperature').value);\r\n    const maxTokens = parseInt(document.getElementById('maxTokens').value);\r\n    const promptStyle = document.getElementById('promptStyle').value;\r\n    const blacklist = document.getElementById('blacklist').value.trim();\r\n    const theme = document.getElementById('theme').value;\r\n    const fontSize = document.getElementById('fontSize').value;\r\n    const status = document.getElementById('status');\r\n\r\n    // Validate API key\r\n    if (!apiKey) {\r\n        showStatus('Invalid API key format. Please check your key.', 'error');\r\n        return;\r\n    }\r\n\r\n    // Validate prompt\r\n    if (!defaultPrompt) {\r\n        showStatus('Default prompt is required.', 'error');\r\n        return;\r\n    }\r\n\r\n    const maxPosts = parseInt(document.getElementById('maxPosts').value);\r\n    const debugMode = document.getElementById('debugMode').checked;\r\n    const autoExpand = document.getElementById('autoExpand').checked;\r\n    const customCSS = document.getElementById('customCSS').value.trim();\r\n\r\n    if (isNaN(maxPosts) || maxPosts < 1 || maxPosts > 50) {\r\n        showStatus('Maximum posts must be between 1 and 50.', 'error');\r\n        return;\r\n    }\r\n\r\n    chrome.storage.sync.set({\r\n        apiKey: apiKey,\r\n        temperature: temperature,\r\n        maxTokens: maxTokens,\r\n        promptStyle: promptStyle,\r\n        defaultPrompt: defaultPrompt,\r\n        blacklist: blacklist,\r\n        theme: theme,\r\n        fontSize: fontSize,\r\n        maxPosts: maxPosts,\r\n        debugMode: debugMode,\r\n        autoExpand: autoExpand,\r\n        customCSS: customCSS\r\n    }, function() {\r\n        if (chrome.runtime.lastError) {\r\n            console.error(\"Error saving settings:\", chrome.runtime.lastError);\r\n            showStatus('Error saving settings: ' + chrome.runtime.lastError.message, 'error');\r\n        } else {\r\n            showStatus('Settings saved successfully.', 'success');\r\n        }\r\n    });\r\n}\r\n\r\n// Show status message with specified type (success/error)\r\nfunction showStatus(message, type = 'success') {\r\n    const status = document.getElementById('status');\r\n    status.textContent = message;\r\n    status.className = `status ${type}`;\r\n    status.style.display = 'block';\r\n    \r\n    if (type === 'success') {\r\n        setTimeout(function() {\r\n            status.style.display = 'none';\r\n        }, 2000);\r\n    }\r\n}\r\n\r\n// Restore options from chrome.storage\r\nfunction restoreOptions() {\r\n    chrome.storage.sync.get({\r\n        apiKey: '',\r\n        temperature: 0.7,\r\n        maxTokens: 150,\r\n        promptStyle: 'professional-formal',\r\n        defaultPrompt: 'You are a professional LinkedIn user. Generate an engaging and relevant comment for the following LinkedIn post by {name}: \"{content}\". The comment should be professional, add value to the discussion, and maintain a friendly tone. Keep it concise and natural.',\r\n        blacklist: '',\r\n        theme: 'light',\r\n        fontSize: 'medium',\r\n        maxPosts: 10,\r\n        debugMode: false,\r\n        autoExpand: false,\r\n        customCSS: ''\r\n    }, function(items) {\r\n        if (chrome.runtime.lastError) {\r\n            showStatus('Error loading settings: ' + chrome.runtime.lastError.message, 'error');\r\n            return;\r\n        }\r\n        document.getElementById('apiKey').value = items.apiKey;\r\n        document.getElementById('temperature').value = items.temperature;\r\n        document.getElementById('temperatureValue').textContent = items.temperature;\r\n        document.getElementById('maxTokens').value = items.maxTokens;\r\n        document.getElementById('maxTokensValue').textContent = items.maxTokens;\r\n        document.getElementById('promptStyle').value = items.promptStyle;\r\n        document.getElementById('defaultPrompt').value = items.defaultPrompt;\r\n        document.getElementById('blacklist').value = items.blacklist;\r\n        document.getElementById('theme').value = items.theme;\r\n        document.getElementById('fontSize').value = items.fontSize;\r\n        document.getElementById('maxPosts').value = items.maxPosts;\r\n        document.getElementById('debugMode').checked = items.debugMode;\r\n        document.getElementById('autoExpand').checked = items.autoExpand;\r\n        document.getElementById('customCSS').value = items.customCSS;\r\n    });\r\n}\r\n\r\nlet saveTimeout;\r\nfunction debouncedSave() {\r\n    clearTimeout(saveTimeout);\r\n    saveTimeout = setTimeout(saveOptions, 500);\r\n}\r\n\r\nfunction setupAutoSave() {\r\n    // Handle immediate save for checkboxes and select elements\r\n    const immediateElements = document.querySelectorAll('input[type=\"checkbox\"], select');\r\n    immediateElements.forEach(element => {\r\n        element.addEventListener('change', saveOptions);\r\n    });\r\n\r\n    // Handle debounced save for text inputs, textareas, and range inputs\r\n    const debouncedElements = document.querySelectorAll(\r\n        'input[type=\"text\"], input[type=\"number\"], textarea, input[type=\"range\"]'\r\n    );\r\n    debouncedElements.forEach(element => {\r\n        if (element.type === 'range') {\r\n            element.addEventListener('input', () => {\r\n                // Update display value immediately\r\n                const valueDisplay = document.getElementById(`${element.id}Value`);\r\n                if (valueDisplay) {\r\n                    valueDisplay.textContent = element.value;\r\n                }\r\n                // Debounce the save\r\n                debouncedSave();\r\n            });\r\n        } else {\r\n            element.addEventListener('input', debouncedSave);\r\n        }\r\n    });\r\n}\r\n\r\n// Add input validation listeners\r\nfunction addValidationListeners() {\r\n    const apiKeyInput = document.getElementById('apiKey');\r\n    const promptInput = document.getElementById('defaultPrompt');\r\n    const maxPostsInput = document.getElementById('maxPosts');\r\n    \r\n    apiKeyInput.addEventListener('input', function() {\r\n        // No validation for API key\r\n        this.style.borderColor = '';\r\n    });\r\n\r\n    promptInput.addEventListener('input', function() {        \r\n        const value = this.value.trim();\r\n        const hasPlaceholders = value.includes('{content}') && value.includes('{name}');\r\n        this.style.borderColor = hasPlaceholders ? '' : 'red';\r\n    });\r\n\r\n    maxPostsInput.addEventListener('input', function() {\r\n        const value = parseInt(this.value);\r\n        const isValid = !isNaN(value) && value >= 1 && value <= 50;\r\n        this.style.borderColor = isValid ? '' : 'red';\r\n    });\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    restoreOptions();\r\n    addValidationListeners();\r\n    setupAutoSave();\r\n});\r\n"],"names":[],"sourceRoot":""}