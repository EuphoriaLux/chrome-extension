{"version":3,"file":"contentScript.bundle.js","mappingssources":["webpack://power-up_extension/./linkedin-enhancer/src/contentScript.js"],"sourcesContent":["if (window.linkedInEnhancerInitialized) {\n    console.log(\"LinkedIn Enhancer already initialized, skipping...\");\n} else {\n    window.linkedInEnhancerInitialized = true;\n\n    console.log(\"Content script loaded and running\");\n\n    // Debug configuration\n    const DEBUG = {\n        enabled: true,\n        logPostHTML: true,\n        logSelectors: true\n    };\n\n    function debugLog(...args) {\n        if (DEBUG.enabled) {\n            console.log(...args);\n        }\n    }\n\n    function debugError(...args) {\n        if (DEBUG.enabled) {\n            console.error(...args);\n        }\n    }\n\n    chrome.runtime.onMessage.addListener(\n        function(request, sender, sendResponse) {\n            debugLog(\"Content script received message:\", request);\n            \n            if (request.action === \"getPostContent\") {\n                try {\n                    debugLog(\"Getting LinkedIn posts...\");\n                    const postContent = getLinkedInPosts();\n                    debugLog(\"Retrieved posts:\", postContent);\n                    \n                    // Send response immediately\n                    sendResponse({ \n                        posts: postContent,\n                        debug: {\n                            totalPostsFound: postContent.length,\n                            timestamp: new Date().toISOString()\n                        }\n                    });\n                } catch (error) {\n                    debugError(\"Error getting posts:\", error);\n                    sendResponse({ \n                        posts: [], \n                        error: error.message,\n                        debug: {\n                            errorStack: error.stack,\n                            timestamp: new Date().toISOString()\n                        }\n                    });\n                }\n            }\n            // Return false since we're sending the response synchronously\n            return false;\n        }\n    );\n\n    function getLinkedInPosts() {\n        debugLog(\"Starting to extract posts\");\n        const posts = [];\n        \n        // Updated selectors for modern LinkedIn feed\n        const postContainers = document.querySelectorAll([\n            'div.feed-shared-update-v2',\n            'div.occludable-update',\n            'div[data-urn]',\n            'div.feed-shared-update-v2__content',\n            'div.update-components-actor',\n            'div.feed-shared-actor'\n        ].join(', '));\n        \n        debugLog(`Found ${postContainers.length} potential post containers`);\n\n        if (postContainers.length === 0) {\n            debugError(\"No post containers found. DOM structure may have changed.\");\n            return [];\n        }\n\n        postContainers.forEach((postContainer, index) => {\n            try {\n                if (DEBUG.logPostHTML) {\n                    debugLog(`Post ${index + 1} HTML:`, postContainer.outerHTML);\n                }\n\n                const postData = extractPostData(postContainer, index);\n                \n                if (postData.isValid) {\n                    posts.push({\n                        posterName: postData.posterName,\n                        postContent: postData.postContent,\n                        timestamp: new Date().toISOString(),\n                        index: index\n                    });\n                }\n            } catch (error) {\n                debugError(`Error processing post ${index + 1}:`, error);\n            }\n        });\n\n        debugLog(`Successfully extracted ${posts.length} valid posts`);\n        return posts.filter(post => post.postContent && post.postContent !== \"Content not available\");\n    }\n\n    function extractPostData(postContainer, index) {\n        const nameSelectors = [\n            'span.update-components-actor__name',\n            'span.feed-shared-actor__name',\n            'span.update-components-actor__title',\n            'a.update-components-actor__meta-link',\n            'a[data-control-name=\"actor_container\"] span',\n            'div.update-components-actor__meta-link',\n            '.actor-name',\n            'div.feed-shared-actor__title span'\n        ];\n\n        const contentSelectors = [\n            'div.feed-shared-update-v2__description-wrapper',\n            'div.feed-shared-text-view',\n            'div.update-components-text',\n            'div.feed-shared-text',\n            'div.update-components-text__text-view',\n            'div.feed-shared-update-v2__commentary',\n            'span[dir=\"ltr\"]',\n            'div.feed-shared-inline-show-more-text'\n        ];\n\n        let posterName = findElementContent(postContainer, nameSelectors, 'name', index);\n        let postContent = findElementContent(postContainer, contentSelectors, 'content', index);\n\n        // Clean up the extracted text\n        if (postContent) {\n            postContent = cleanUpPostContent(postContent);\n            postContent = removeNameFromContent(postContent, posterName);\n        }\n\n        return {\n            posterName: posterName || \"Unknown User\",\n            postContent: postContent || \"Content not available\",\n            isValid: Boolean(posterName && postContent && \n                            postContent !== \"Content not available\")\n        };\n    }\n\n    function findElementContent(container, selectors, type, postIndex) {\n        for (let selector of selectors) {\n            try {\n                if (DEBUG.logSelectors) {\n                    debugLog(`Trying ${type} selector on post ${postIndex + 1}:`, selector);\n                }\n                \n                const element = container.querySelector(selector);\n                if (element) {\n                    const content = element.innerText || element.textContent;\n                    if (content && content.trim()) {\n                        debugLog(`Found ${type} using selector \"${selector}\":`, content.trim());\n                        return content.trim();\n                    }\n                }\n            } catch (error) {\n                debugError(`Error with selector \"${selector}\":`, error);\n            }\n        }\n        debugLog(`Could not find ${type} for post ${postIndex + 1}`);\n        return null;\n    }\n\n    function cleanUpPostContent(text) {\n        if (text) {\n            // Remove extra whitespace and line breaks\n            let cleanedText = text.replace(/\\s+/g, ' ').trim();\n            // Remove any leading or trailing newlines\n            cleanedText = cleanedText.replace(/^\\n+|\\n+$/g, '');\n            // Handle HTML entities and decode them\n            const tempElement = document.createElement('div');\n            tempElement.innerHTML = cleanedText;\n            cleanedText = tempElement.textContent || tempElement.innerText || \"\";\n            return cleanedText;\n        }\n        return \"\";\n    }\n\n    function removeNameFromContent(content, name) {\n        if (!content || !name) {\n            return content;\n        }\n\n        // Split name into parts to handle first/last name separately\n        const nameParts = name.split(/\\s+/);\n\n        // Create a regex that matches:\n        // 1. The exact full name\n        // 2. The name followed by \"shared\" or \"posted\"\n        // 3. The name at the start of the content\n        const patterns = [\n            `(${name.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')}\\\\s*)`,\n            `(${name.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')}\\\\s*(shared|posted|writes|commented|likes))`,\n            `^(${name.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')}\\\\s*)`\n        ];\n\n        let cleanContent = content;\n\n        // Apply each pattern\n        patterns.forEach(pattern => {\n            const regex = new RegExp(pattern, 'gi');\n            cleanContent = cleanContent.replace(regex, '');\n        });\n\n        // Clean up any resulting double spaces and trim\n        cleanContent = cleanContent.replace(/\\s+/g, ' ').trim();\n\n        return cleanContent;\n    }\n}\n"],"names":[],"sourceRoot":""}