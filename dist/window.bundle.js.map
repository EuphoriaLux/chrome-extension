{"version":3,"file":"window.bundle.js","mappingssources":["webpack://power-up_extension/./src/window/window.js"],"sourcesContent":["console.log(\"Window script loaded\");\r\n\r\n// Send a message to the background script when the window is ready\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    chrome.runtime.sendMessage({ action: \"windowReady\" }, function(response) {        \r\n        if (chrome.runtime.lastError) {\r\n            console.error(\"Window script - Error sending window ready message:\", chrome.runtime.lastError);\r\n        } else {\r\n            console.log(\"Window script - Window ready message sent to background script\");\r\n        }\r\n    });    \r\n});\r\n\r\n// Initialize theme\r\nfunction initializeTheme() {\r\n    chrome.storage.sync.get('theme', function(data) {\r\n        if (data.theme) {\r\n            document.body.setAttribute('data-theme', data.theme);\r\n        }\r\n    });\r\n}\r\n\r\n// Initialize theme when window loads\r\ndocument.addEventListener('DOMContentLoaded', initializeTheme);\r\n\r\n// Listen for theme changes\r\nchrome.storage.onChanged.addListener(function(changes, namespace) {\r\n    if (changes.theme) {\r\n        document.body.setAttribute('data-theme', changes.theme.newValue);\r\n    }\r\n});\r\n\r\nchrome.runtime.onMessage.addListener(\r\n    function(request, sender, sendResponse) {\r\n        console.log(\"Window script - Received message:\", request);\r\n        if (request.action === \"setPostContent\") {\r\n            console.log(\"Window script - Received posts:\", request.postContent);\r\n            const posts = request.postContent;\r\n            const postContainer = document.getElementById('post-container');\r\n            postContainer.innerHTML = ''; // Clear previous content\r\n\r\n            // Send acknowledgment back to background script immediately\r\n            chrome.runtime.sendMessage({\r\n                action: \"postsReceived\",\r\n                timestamp: new Date().toISOString()\r\n            }, function(response) {\r\n                if (chrome.runtime.lastError) {\r\n                    console.error(\"Window script - Error sending posts received message:\", {\r\n                        error: chrome.runtime.lastError,\r\n                        message: chrome.runtime.lastError.message,\r\n                        stack: new Error().stack\r\n                    });\r\n                } else {\r\n                    console.log(\"Window script - Posts received message sent successfully:\", response);\r\n                }\r\n            });\r\n\r\n            if (Array.isArray(posts)) {\r\n                posts.forEach(post => {\r\n                    const postDiv = document.createElement('div');\r\n                    postDiv.classList.add('post-card');\r\n                    postDiv.innerHTML = `\r\n                        <div class=\"post-header\">\r\n                            <h3 class=\"poster-name\">${post.posterName}</h3>\r\n                        </div>\r\n                        <div class=\"post-content\">${post.postContent}</div>\r\n                        <div class=\"post-actions\">\r\n                            <button class=\"generate-comment-btn\" data-post-id=\"${post.index}\">\r\n                                <span class=\"loading-spinner hidden\"></span>\r\n                                Generate Comment\r\n                            </button>\r\n                            <div class=\"generated-comment hidden\">\r\n                                <h4>Generated Comment:</h4>\r\n                                <div class=\"comment-content\"></div>\r\n                                <button class=\"copy-comment-btn\">Copy Comment</button>\r\n                            </div>\r\n                        </div>\r\n                    `;\r\n                    postContainer.appendChild(postDiv);\r\n                });\r\n                setupButtonListeners(); // Setup listeners after posts are rendered\r\n            } else {\r\n                const contentDiv = document.createElement('div');\r\n                contentDiv.textContent = \"Could not retrieve post content.\";\r\n                contentDiv.classList.add('status-message', 'error');\r\n                postContainer.appendChild(contentDiv);\r\n            }\r\n            // Send response to acknowledge receipt\r\n            sendResponse({ success: true });\r\n            return true; // Keep the message channel open\r\n        }\r\n    }\r\n);\r\n\r\nfunction setupButtonListeners() {\r\n    // Generate comment buttons\r\n    document.querySelectorAll('.generate-comment-btn').forEach(button => {\r\n        button.addEventListener('click', async function() {\r\n            const postId = this.dataset.postId;\r\n            const commentSection = this.nextElementSibling;\r\n            const commentContent = commentSection.querySelector('.comment-content');\r\n            const loadingSpinner = this.querySelector('.loading-spinner');\r\n            \r\n            // Show loading state\r\n            if (loadingSpinner) {\r\n                loadingSpinner.classList.remove('hidden');\r\n            }\r\n            this.disabled = true;\r\n            commentSection.classList.remove('hidden');\r\n\r\n            try {\r\n                // Send message to background script to generate comment and await response\r\n                const response = await new Promise((resolve, reject) => {\r\n                    chrome.runtime.sendMessage({ action: \"generateComment\", postId: postId }, response => {\r\n                        if (chrome.runtime.lastError) {\r\n                            console.error(\"Window script - Error sending generateComment message:\", {\r\n                                error: chrome.runtime.lastError,\r\n                                message: chrome.runtime.lastError.message,\r\n                                stack: new Error().stack\r\n                            });\r\n                            reject(new Error(chrome.runtime.lastError.message));\r\n                        } else if (response && response.error) {\r\n                            console.error(\"Window script - Error generating comment:\", response.error);\r\n                            reject(new Error(response.error));\r\n                        } else {\r\n                            resolve(response);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                commentContent.textContent = response.comment;\r\n            } catch (error) {\r\n                console.error(\"Error generating comment:\", error);\r\n                commentContent.textContent = `Error generating comment: ${error.message}`;\r\n            } finally {                \r\n                loadingSpinner.classList.add('hidden');\r\n                this.disabled = false;\r\n            }\r\n        });\r\n    });\r\n\r\n    // Copy comment buttons\r\n    document.querySelectorAll('.copy-comment-btn').forEach(button => {\r\n        button.addEventListener('click', function() {\r\n            const commentText = this.parentElement.querySelector('.comment-content').textContent;\r\n            navigator.clipboard.writeText(commentText).then(() => {\r\n                const originalText = this.textContent;\r\n                this.textContent = \"Copied!\";\r\n                setTimeout(() => {\r\n                    this.textContent = originalText;\r\n                }, 2000);\r\n            }).catch(err => {\r\n                console.error('Failed to copy text:', err);\r\n            });\r\n        });\r\n    });\r\n}\r\n"],"names":[],"sourceRoot":""}